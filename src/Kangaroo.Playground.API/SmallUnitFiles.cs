// <autogenerated>

namespace Kangaroo.Playground.API
{
    using AutoMapper;
    using FluentValidation;
    using FluentValidation.AspNetCore;
    using Microsoft.AspNetCore.Identity;
    using Microsoft.AspNetCore.Identity.EntityFrameworkCore;
    using Microsoft.AspNetCore.Mvc;
    using Microsoft.EntityFrameworkCore;
    using Microsoft.EntityFrameworkCore.Metadata.Builders;
    using Microsoft.Extensions.DependencyInjection;
    using Microsoft.Extensions.Logging;
    using System;
    using System.Collections.Generic;
    using System.ComponentModel.DataAnnotations;
    using System.ComponentModel.DataAnnotations.Schema;
    using System.Linq;
    using System.Linq.Expressions;
    using System.Net;
    using System.Text;
    using System.Text.Json;
    using System.Threading.Tasks;
    using Kangaroo.Playground.Infrastructure.DatabaseRepositories;
    using Kangaroo.Playground.Infrastructure.DatabaseRepositories.DBContexts;
    using Kangaroo.Playground.Infrastructure.DatabaseRepositories.EntityTypeConfiguration;
    using Kangaroo.Playground.Infrastructure.DatabaseRepositories.Mapper;
    using Kangaroo.Playground.Infrastructure.DatabaseEntities;
    using Kangaroo.Playground.Entities;
    using Kangaroo.Playground.Entities.Validators;
    using Kangaroo.Models.DatabaseEntities;
    using Kangaroo.Models.Entities;
    using Kangaroo.Models;


    #region Exceptions
    public enum KangarooErrorCode
    {
        UnhandledException = 1,
        YouCannotInsertDuplicateValues = 2,
    }

    public class KangarooInfoException
    {
        public KangarooErrorCode KangarooErrorCode { get; set; }

        public string AdditionalInfo { get; set; }
    }

    public class KangarooException : Exception
    {
        public KangarooException(KangarooErrorCode kangarooErrorCode, string additionalInfo = null)
        {
            this.KangarooErrorCode = kangarooErrorCode;
            this.AdditionalInfo = additionalInfo;
        }

        public KangarooErrorCode KangarooErrorCode { get; }

        public string AdditionalInfo { get; }
    }
    #endregion Exceptions

    #region Services
    public interface IEntityHandlerService<TDatabaseEntity, TEntity>
        where TDatabaseEntity : class
        where TEntity : class
    {
        public Task SaveAsync(TEntity entity);
    }

    public abstract class EntityHandlerService<TDatabaseEntity, TEntity> : IEntityHandlerService<TDatabaseEntity, TEntity>
        where TDatabaseEntity : class, IDatabaseEntity
        where TEntity : class, IEntity
    {
        protected readonly IApplicationDatabaseRepository entityHandlerRepository;
        private readonly IMapper mapper;

        public EntityHandlerService(IApplicationDatabaseRepository entityHandlerRepository, IMapper mapper)
        {
            this.entityHandlerRepository = entityHandlerRepository;
            this.mapper = mapper;
        }

        public async Task SaveAsync(TEntity entity)
        {
            if (this.Validate(entity) && await this.ValidateAsync(entity))
            {
                var databaseEntity = this.entityHandlerRepository.ApplyChanges<TDatabaseEntity, TEntity>(entity);
                await this.entityHandlerRepository.SaveAsync();
                entity = this.mapper.Map<TEntity>(databaseEntity);
            }
        }

        protected virtual bool Validate(TEntity entity)
        {
            return true;
        }

        protected virtual async Task<bool> ValidateAsync(TEntity entity)
        {
            return await Task.FromResult(true);
        }
    }

    public partial interface ICountryService : IEntityHandlerService<TbCountry, Country>
    {
    }

    public partial class CountryService : EntityHandlerService<TbCountry, Country>, ICountryService
    {
        public CountryService(IApplicationDatabaseRepository entityHandlerRepository, IMapper mapper) : base(entityHandlerRepository, mapper)
        {
        }
    }

    public partial class CountryService
    {
        protected override async Task<bool> ValidateAsync(Country entity)
        {
            var results = await this.entityHandlerRepository.GetByConditionAsync<TbCountry, Country>(x => x.Where(y => y.Name == entity.Name));
            if (results.Any())
            {
                throw new KangarooException(KangarooErrorCode.YouCannotInsertDuplicateValues);
            }
            return true;
        }
    }
    #endregion Services

    #region API
    public class ExceptionMiddleware
    {
        private readonly RequestDelegate next;
        private readonly ILogger<ExceptionMiddleware> logger;

        public ExceptionMiddleware(RequestDelegate next, ILogger<ExceptionMiddleware> logger)
        {
            this.next = next;
            this.logger = logger;
        }

        public async Task InvokeAsync(HttpContext context)
        {
            try
            {
                await next(context);
            }
            catch (KangarooException exception)
            {
                logger.LogError(exception.ToString());
                await HandleExceptionAsync(context, exception.KangarooErrorCode, exception.AdditionalInfo);
            }
            catch (Exception exception)
            {
                logger.LogError(exception.ToString());
                await HandleExceptionAsync(context, KangarooErrorCode.UnhandledException);
            }
        }

        private async Task HandleExceptionAsync(HttpContext context, KangarooErrorCode kangarooErrorCode, string additionalInfo = null)
        {
            context.Response.ContentType = "application/json";
            context.Response.StatusCode = (int)HttpStatusCode.InternalServerError;
            await context.Response.WriteAsync(
                JsonSerializer.Serialize(new KangarooInfoException()
                {
                    KangarooErrorCode = kangarooErrorCode,
                    AdditionalInfo = additionalInfo
                }));
        }
    }

    public static class APIExtensions
    {
        public static void AddServiceCollection(this IServiceCollection services)
        {
            services.AddDbContext<ApplicationDbContext>(x => x.UseSqlServer("Data Source=(localdb)\\MSSQLLocalDB;Database=MyDbTest;Trusted_Connection=True;",
                    y => y.UseQuerySplittingBehavior(QuerySplittingBehavior.SplitQuery))
                    .UseQueryTrackingBehavior(QueryTrackingBehavior.NoTracking))
                .AddTransient<IApplicationDatabaseRepository, ApplicationDatabaseRepository>()
                .AddTransient<ICountryService, CountryService>()
                .AddLogging(x => x.AddDebug())
                .AddAutoMapper(typeof(ApplicationAutoMapperProfile));

            services.AddMvc(x => x.SuppressImplicitRequiredAttributeForNonNullableReferenceTypes = true)
                .AddFluentValidation(x => x.ImplicitlyValidateChildProperties = true);
            services.AddTransient<IValidator<Country>, CountryValidator>();
            services.AddTransient<IValidator<CountryHandlerRequest>, CountryHandlerRequestValidator>();
        }

        public static async Task ConfigureDatabase(this IApplicationBuilder applicationBuilder)
        {
            using (var serviceScope = applicationBuilder.ApplicationServices.CreateScope())
            {
                var myDbContext = serviceScope.ServiceProvider.GetService<ApplicationDbContext>();

                await myDbContext.Database.EnsureDeletedAsync();
                await myDbContext.Database.EnsureCreatedAsync();

                myDbContext.Countries.Add(new TbCountry { Name = "Country 1", CreatedByUserName = "Admin", CreatedAt = DateTimeOffset.Now });
                myDbContext.Countries.Add(new TbCountry { Name = "Country 2", CreatedByUserName = "Admin", CreatedAt = DateTimeOffset.Now });
                myDbContext.Countries.Add(new TbCountry { Name = "Country 3", CreatedByUserName = "Admin", CreatedAt = DateTimeOffset.Now });
                await myDbContext.SaveChangesAsync();
                myDbContext.ChangeTracker.Clear();
            }
        }

        public static void ConfigureCustomExceptionMiddleware(this IApplicationBuilder applicationBuilder)
        {
            applicationBuilder.UseMiddleware<ExceptionMiddleware>();
        }
    }

    [ApiController]
    [Route("[controller]/[action]")]
    public class CountryController : ControllerBase
    {
        private readonly ILogger<CountryController> logger;
        private readonly ICountryService countryService;

        public CountryController(
            ILogger<CountryController> logger,
            ICountryService countryService)
        {
            this.logger = logger;
            this.countryService = countryService;
        }

        [HttpPost]
        public async Task<IActionResult> PostNewCountry(CountryHandlerRequest country)
        {
            await this.countryService.SaveAsync(country.Entity);

            return Ok();
        }

        [HttpPost]
        public async Task<IActionResult> Post()
        {
            var country = new Country()
            {
                CountryId = 1,
                Name = "This is my correct name",
                DataState = DataState.Updated,
            };

            try
            {
                await this.countryService.SaveAsync(country);
            }
            catch (DbUpdateConcurrencyException concurrencyException)
            {
            }
            catch (Exception ex)
            {

            }

            return Ok();
        }
    }
    #endregion API
}
